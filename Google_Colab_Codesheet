##Importing Texttable for displaying the matrix

pip install Texttable

##Random position generator function

def posgen():
  r1 = random.randint(0,3)
  r2 = random.randint(0,3)
  while r1==0 and r2==0:
    r1 = random.randint(0,3)
    r2 = random.randint(0,3)
  return [r1,r2]

##Generating positions for Wumpus, Pits and Gold, randomly 

import random
pos=[]
while(len(pos)!=5):
  count=0
  t=posgen()
  for i in range(len(pos)):
    if pos[i]==t:
      count+=1
      break
  if count!=0:
    continue
  else:
    pos.append(t)
print(pos)

# Taking the 1st pair as the coordinates of the wumpus and the 2nd,3rd and 4th pair as the coordinates of the pits and the 5th one as the coordinates of the wumpus

##Declaring an empty list of a dimension of 4x4

listpos=[["","","",""],["","","",""],["","","",""],["","","",""]]

##Assigning positions for the Wumpus, Pits and Gold

listpos[pos[0][0]][pos[0][1]]="W"
listpos[pos[1][0]][pos[1][1]]="P"
listpos[pos[2][0]][pos[2][1]]="P"
listpos[pos[3][0]][pos[3][1]]="P"
listpos[pos[4][0]][pos[4][1]]="G"

listpos

##Adding the agent to the matrix

listpos[0][0]="A"

listpos

def fn(list,x,y,condition):
  if (x>=0 and x<4) and (y>=0 and y<4):
    return list[x][y]+condition
  else:
    return ""

listpos

##Adding the Stench and Breeze to the matrix, around the pits and the wumpus respectively.

x=pos[0][0]
y=pos[0][1]
condition=""
for i in range(0,4):
  if i==0:
    condition="S"
  else:
    condition="B"
  x=pos[i][0]
  y=pos[i][1]
  z=[""]*4
  z[0]=fn(listpos,x,y+1,condition)
  z[1]=fn(listpos,x,y-1,condition)
  z[2]=fn(listpos,x+1,y,condition)
  z[3]=fn(listpos,x-1,y,condition)
  if z[0]!="":
    listpos[x][y+1]=z[0]
  if z[1]!="":
    listpos[x][y-1]=fn(listpos,x,y-1,condition)
  if z[2]!="":
    listpos[x+1][y]=fn(listpos,x+1,y,condition)
  if z[3]!="":
    listpos[x-1][y]=fn(listpos,x-1,y,condition)

listpos

##Removing the duplicate letters from listpos

from collections import OrderedDict
def removeDupWithOrder(str): 
    return "".join(OrderedDict.fromkeys(str))

for i in range(0,4):
  for j in range(0,4):
    listpos[i][j]=removeDupWithOrder(listpos[i][j])

listpos

##Displaying the 4x4 matrix

from texttable import Texttable

# texttable takes the first reocrd in the list as the column names
# of the table
Exp=[]
table = Texttable()
table.add_rows(listpos,header=None)
print(table.draw())

##Function when on calling displays the matrix 

def tabledraw(list):
  table = Texttable()
  table.add_rows(list,header=None)
  print(table.draw())

##The main code for the Wumpus World Problem

import random
i=0
j=0
Expnode=[[0,0]]
pitpos=[]
Exp=[]
cost=0
while (i>=0 and i<4) and (j>=0 and j<4):
  if listpos[i][j].find("S")!=-1:
    print("CAME ACROSS SOME STENCH HERE!\n")
  if listpos[i][j].find("B")!=-1:
    print("CAME ACROSS SOME BREEZE HERE!\n")
  print("Possible nodes for traversal:\n")
  if (i+1>=0 and i+1<4) and (j>=0 and j<4):
    if [i+1,j] in Expnode:
      print("")
    else:
      print([i+1,j])
  if (i>=0 and i<4) and (j+1>=0 and j+1<4):
    if [i,j+1] in Expnode:
        print("")
    else:
      print([i,j+1])
  if (i-1>=0 and i-1<4) and (j>=0 and j<4):
    if [i-1,j] in Expnode:
        print("")
    else:
      print([i-1,j])
  if (i>=0 and i<4) and (j-1>=0 and j-1<4):
    if [i,j-1] in Expnode:
        print("")
    else:
      print([i,j-1])
  
  print("Enter your choice for moving ahead!")
  i=int(input("The x component"))
  j=int(input("The y component"))
  cost+=-1
  Expnode.append([i,j])
  if listpos[i][j].find("P")!=-1:
    print("RAN INTO A PIT!!!")
    cost+=-1000
    break
  if listpos[i][j].find("G")!=-1:
    print("FOUND THE GOAL NODE!!! SUCCESS")
    cost+=1000
    break
  if listpos[i][j].find("W")!=-1:
    print("THE WUMPUS SCREAMS!!!")
    diff=sum(Expnode[len(Expnode)-1])-sum(Expnode[len(Expnode)-2])
    if diff==-1:
      cost+=-10
      print("THE AGENT SUCCESSFULLY KILLS THE WUMPUS BY CONFRONTATION!!!")
    elif diff==1:
      cost+=-1000
      print("THE AGENT IS DESTROYED BY THE WUMPUS !!! DEFEAT")
      break
tabledraw(listpos)
print("{} is the total cost".format(cost))

